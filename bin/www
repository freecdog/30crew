#!/usr/bin/env node
var debug = require('debug')('30crew');
var app = require('../app');

app.set('port', process.env.PORT || 80);

var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});

app.io = require('socket.io').listen(server);
var io = app.io;

//io.set('log level', 1);
// io.disable('heartbeats');

// http://stackoverflow.com/questions/10058226/send-response-to-all-clients-except-sender-socket-io
// https://github.com/Automattic/socket.io/tree/master/examples/chat
/*
io.sockets.on('connection', function (socket) {
    var emitTo = function(room, eventName, data){
        socket.broadcast.to(room.name).emit(eventName, data);
        room.command = { eventName:eventName, data:data };
        console.log('event saved for room', room);

        //console.log('rooms are:', rooms);
    };

    socket.on('join', function (roomName) {
        console.log("I'l join to: ", roomName);
        socket.join(roomName);

        if(roomName == rooms.students.name) {
            console.log('event emitted to joined student', rooms.students.command);
            socket.emit(rooms.students.command.eventName, rooms.students.command.data);
        }

        //console.log('rooms are:', rooms);
    });

    socket.on('jjoin', function (message) {
        console.log("server jjoin", message);
    });

});   */

// Chatroom

// usernames which are currently connected to the chat
var usernames = {};
var numUsers = 0;

io.on('connection', function (socket) {
    var addedUser = false;

    // when the client emits 'new message', this listens and executes
    socket.on('new message', function (data) {
        // we tell the client to execute 'new message'
        socket.broadcast.emit('new message', {
            username: socket.username,
            message: data
        });
    });

    // when the client emits 'add user', this listens and executes
    socket.on('add user', function (username) {
        // we store the username in the socket session for this client
        socket.username = username;
        // add the client's username to the global list
        usernames[username] = username;
        ++numUsers;
        addedUser = true;
        socket.emit('login', {
            numUsers: numUsers
        });
        // echo globally (all clients) that a person has connected
        socket.broadcast.emit('user joined', {
            username: socket.username,
            numUsers: numUsers
        });
    });

    // when the client emits 'typing', we broadcast it to others
    socket.on('typing', function () {
        socket.broadcast.emit('typing', {
            username: socket.username
        });
    });

    // when the client emits 'stop typing', we broadcast it to others
    socket.on('stop typing', function () {
        socket.broadcast.emit('stop typing', {
            username: socket.username
        });
    });

    // when the user disconnects.. perform this
    socket.on('disconnect', function () {
        // remove the username from global usernames list
        if (addedUser) {
            delete usernames[socket.username];
            --numUsers;

            // echo globally that this client has left
            socket.broadcast.emit('user left', {
                username: socket.username,
                numUsers: numUsers
            });
        }
    });

    socket.on('j', function (data) {
        console.log("jServer" + data);

        // broadcast to everyone
        io.sockets.emit('j', data);

        // broadcast to everyone except socket-starter
        //socket.broadcast.emit('j', data);
    });

});
